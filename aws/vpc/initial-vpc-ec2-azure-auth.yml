AWSTemplateFormatVersion: 2010-09-09
Description: Custom VPC Creation With Private and Public Subnet
Parameters:
  VPCName:
    Description: CIDR range for our VPC
    Type: String
    Default: DemoCustomVPC
  VPCCidr:
    Description: CIDR range for our VPC
    Type: String
    Default: 10.97.224.0/25
  PrivateSubnetACidr:
    Description: Private Subnet IP Range
    Type: String
    Default: 10.97.224.0/27
  PrivateSubnetBCidr:
    Description: Private Subnet IP Range
    Type: String
    Default: 10.97.224.32/27
  PublicSubnetACidr:
    Description: Public Subnet IP Range
    Type: String
    Default: 10.97.224.64/27
  PublicSubnetBCidr:
    Description: Public Subnet IP Range
    Type: String
    Default: 10.97.224.96/27
  AvailabilityZoneA:
    Description: Avaibalbility Zone 1
    Type: String
    Default: us-east-1a
  AvailabilityZoneB:
    Description: Avaibalbility Zone 2
    Type: String
    Default: us-east-1b
  CertDomainName:
    Description: Domain name for the ACM certificate
    Type: String
    Default: '*.something.com'    
Resources:
  DemoVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VPCCidr
      Tags:
        - Key: Name
          Value: !Ref VPCName
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref DemoVPC
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: !Ref PrivateSubnetACidr
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PrivateSubnetA'
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref DemoVPC
      AvailabilityZone: !Ref AvailabilityZoneB
      CidrBlock: !Ref PrivateSubnetBCidr
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PrivateSubnetB'
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref DemoVPC
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: !Ref PublicSubnetACidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PublicSubnetA'
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref DemoVPC
      AvailabilityZone: !Ref AvailabilityZoneB
      CidrBlock: !Ref PublicSubnetBCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PublicSubnetB'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref DemoVPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref DemoVPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  ElasticIPA:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  ElasticIPB:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NATGatewayA:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - ElasticIPA
        - AllocationId
      SubnetId: !Ref PublicSubnetA
  NATGatewayB:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - ElasticIPB
        - AllocationId
      SubnetId: !Ref PublicSubnetB
  PrivateRouteTableA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref DemoVPC
  PrivateRouteTableB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref DemoVPC
  PrivateRouteToInternetA:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA
  PrivateRouteToInternetB:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB
  PrivateSubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA
  PrivateSubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB
  RstudioIAMRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Description: RstudioSSMRoleforlogginginviaSSM
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      RoleName: !Ref VPCName
      Tags: 
        - Key: Name
          Value: RstudioIAMRolessm
  BastionKey:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Ref VPCName          
  RstudioInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RstudioIAMRole         
  ec2InstanceOne:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName:
        Ref: BastionKey
      ImageId: ami-0481e8ba7f486bd99 #ami-01d08089481510ba2
      InstanceType: t3.micro
      IamInstanceProfile: !Ref RstudioInstanceProfile
      AvailabilityZone: !Ref AvailabilityZoneA
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref DemoSecurityGroup
        - !Ref LBSecurityGroup
      UserData: !Base64 
        'Fn::Sub': |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install nginx -y
          sudo apt-get install r-base-core -y
          sudo apt-get install r-base-dev -y
      Tags:
        - Key: Name
          Value: !Join ['',['ec2-one',!Ref VPCName]]
  DemoSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref DemoVPC
      GroupDescription: SG to allow SSH and HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 47.40.50.251/32
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0          
      Tags:
        - Key: Name
          Value: EC2-SG
  MyCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
    ###This format allows for several sub-domains to wildcard with dsegonzo.us or whatever top-level-domain tld you want to use
      DomainName: !Ref CertDomainName ###'*.com.us'
      ValidationMethod: EMAIL
  LBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref DemoVPC
      GroupDescription: SG to allow HTTPS to LoadBalancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0          
      Tags:
        - Key: Name
          Value: EC2-SG	            
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref VPCName
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
      - CertificateArn: !Ref MyCertificate
      DefaultActions:
        - Type: 'fixed-response' # 1. Authenticate with OICD      
          FixedResponseConfig:
              ContentType: text/html
              MessageBody: 'Incorrect path. Please try Again. Please contact the administrator of the site.'
              StatusCode: 401
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: 'HTTPS'
  ListenerRule1:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Priority: 1
      ListenerArn: !Ref Listener
      Conditions:
        - Field: 'host-header'
          Values:
            - 'here.something.com'
      Actions:
        - Type: 'authenticate-oidc' # 1. Authenticate with OICD
          AuthenticateOidcConfig:
            OnUnauthenticatedRequest: 'authenticate'
            Issuer: 'https://login.microsoftonline.com/<tenant-id>/v2.0'
            AuthorizationEndpoint: 'https://login.microsoftonline.com/<tenant-id>/oauth2/v2.0/authorize'
            TokenEndpoint: 'https://login.microsoftonline.com/<tenant-id>/oauth2/v2.0/token'
            UserInfoEndpoint: 'https://graph.microsoft.com/oidc/userinfo'
            ClientId: 'client-id'
            ClientSecret: 'client-secret'
          Order: 1
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
          Order: 2
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Join ['',['One',!Ref VPCName]]
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref DemoVPC
      Targets:
        - Id: !Ref ec2InstanceOne
          Port: 80     
Outputs:      
  VPCId:
    Description: vpc id
    Value: !Ref DemoVPC
  PublicSubnetA:
    Description: SubnetId of public subnet A
    Value: !Ref PublicSubnetA
  PublicSubnetB:
    Description: SubnetId of public subnet B
    Value: !Ref PublicSubnetB
  PrivateSubnetA:
    Description: SubnetId of private subnet A
    Value: !Ref PrivateSubnetA
  PrivateSubnetB:
    Description: SubnetId of private subnet B
    Value: !Ref PublicSubnetB
  ec2InstanceOneId:
    Description: Demo Instance Id
    Value: !Ref ec2InstanceOne